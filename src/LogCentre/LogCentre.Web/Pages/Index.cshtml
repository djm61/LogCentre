@page
@model IndexModel
@{
    ViewData["Title"] = "Log Centre Search";
}

@section Head {
    <link rel="stylesheet" href="~/lib/jquery-datetimepicker/jquery.datetimepicker.min.css" />
    <link rel="stylesheet" href="~/lib/jgrowl/jquery.jgrowl.min.css" />
}

<div class="errorNotification"></div>

<div class="row">
    <div class="col-1">Start Date</div>
    <div class="col-1">End Date</div>
    <div class="col-2">Level</div>
    <dic class="col-2">Source</dic>
    <div class="col-3">Log Line</div>
    <div class="col-auto"></div>
    <div class="col-1"></div>
</div>

<div class="mb-3 row">
    <div class="col-1">
        <input type="text" id="startDate" class="form-control" style="width: 99%" autocomplete="off" />
    </div>
    <div class="col-1">
        <input type="text" id="endDate" class="form-control" style="width: 99%" autocomplete="off" />
    </div>
    <div class="col-2">
        <input type="text" id="level" class="form-control" style="width: 99%" autocomplete="off" />
    </div>
    <div class="col-2">
        <input type="text" id="source" class="form-control" style="width:99%" autocomplete="off" />
    </div>
    <div class="col-3">
        <input type="text" id="searchText" class="form-control" style="width: 99%" autocomplete="off" />
    </div>
    <div class="col-auto"></div>
    <div class="col-1">
        <input type="submit" id="btnSubmit" value="Search" class="btn btn-primary" />
    </div>
</div>

@section Scripts{
    <script src="~/lib/momentjs/moment.min.js"></script>
    <script src="~/lib/jquery-datetimepicker/jquery.datetimepicker.full.min.js"></script>
    <script src="~/lib/jgrowl/jquery.jgrowl.min.js"></script>
    <script type="text/javascript">
        const minSearchLength = 3;

        function getDateAsString(date) {
            window.console.log('getDateAsString() | date[' + date + ']');
            let str = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate() + ' ' + date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();
            window.console.log('getDateAsString() | returning[' + str + ']');
            return str;
        }

        function getToday() {
            window.console.log('getToday()');
            let today = moment().toDate();
            let todayStr = getDateAsString(today);
            window.console.log('getToday() | returning[' + todayStr + ']');
            return todayStr;
        }

        function getYesterday() {
            window.console.log('getYesterday()');
            let yesterday = moment().subtract(1, 'day').toDate();
            let yesterdayStr = getDateAsString(yesterday);
            window.console.log('getYesterday() | returning[' + yesterdayStr + ']');
            return yesterdayStr;
        }

        $(document).ready(function () {
            $(".dismiss").click(function () {
                $("#errorNotification").fadeOut("slow");
            });

            //#region JS Datetime picker
            //see: https://xdsoft.net/jqplugins/datetimepicker/ for documentation
            $.datetimepicker.setDateFormatter({
                parseDate: function (date, format) {
                    var d = moment(date, format);
                    return d.isValid() ? d.toDate() : false;
                },

                formatDate: function (date, format) {
                    return moment(date).format(format);
                },

                //Optional if using mask input
                formatMask: function (format) {
                    return format
                        .replace(/Y{4}/g, '9999')
                        .replace(/Y{2}/g, '99')
                        .replace(/M{2}/g, '19')
                        .replace(/D{2}/g, '39')
                        .replace(/H{2}/g, '29')
                        .replace(/m{2}/g, '59')
                        .replace(/s{2}/g, '59');
                }
            });

            $('#startDate').datetimepicker({
                format: "YYYY-MM-DD hh:mm:ss",
                formatDate: "YYYY-MM-DD",
                timeFormat: "hh:mm:ss",
                //value: getYesterday(),
                mask: true,
                onShow: function (ct) {
                    this.setOptions({
                        maxDate: $('#endDate').val() ? $('#endDate').val() : false
                    })
                }
            });

            $('#endDate').datetimepicker({
                //format: "Y-m-d H:i z",
                format: 'YYYY-MM-DD hh:mm:ss',
                formatDate: "YYYY-MM-DD",
                timeFormat: "hh:mm:ss",
                //value: getToday(),
                mask: true,
                onShow: function (ct) {
                    this.setOptions({
                        minDate: $('#startDate').val() ? $('#startDate').val() : false
                    })
                }
            });

            $('#startDate').val(getYesterday());
            $('#endDate').val(getToday());
            //#endregion

            $('#btnSubmit').click(function () {
                let fromDate = $('#startDate').val();
                let endDate = $('#endDate').val();
                let level = $('#level').val();
                let source = '';
                let searchText = $('#searchText').val();
                let model = {
                    StartDate: fromDate,
                    EndDate: endDate,
                    Level: level,
                    Source: source,
                    LogLine: searchText
                };

                $.ajax({
                    type: 'get',
                    cache: false,
                    dataType: 'json',
                    contentType: 'application/json',
                    url: '?handler=PerformSearch',
                    data: model,
                    beforesend: function () {
                        //do nothing
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        window.console.log('performSearch error xhr[' + xhr + ']');
                        window.console.log('performSearch error ajaxOptions[' + ajaxOptions + ']');
                        window.console.log('performSearch error thrownError[' + thrownError + ']');
                    },
                    success: function (data) {
                        window.console.log(data);
                        if (data) {
                            if (data.isValid) {
                                if (data.results) {
                                    //todo parse results into something
                                }
                            } else {
                                if (data.results) {
                                    $.jGrowl(data.results, { sticky: true });
                                }
                            }
                        }
                    }
                })
            });
        });
    </script>
}